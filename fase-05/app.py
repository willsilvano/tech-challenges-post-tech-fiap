# app.py
import streamlit as st
import google.generativeai as genai
from PIL import Image
import json
import io
import os

from dotenv import load_dotenv

load_dotenv()

# --- Configura√ß√£o da P√°gina e da API ---
st.set_page_config(
    page_title="An√°lise de Arquitetura com Gemini",
    page_icon="üõ°Ô∏è",
    layout="wide"
)

# Configurar a API do Gemini a partir dos segredos do Streamlit
try:
    api_key = os.getenv("GOOGLE_API_KEY")
    genai.configure(api_key=api_key)
except (KeyError, FileNotFoundError):
    st.error("A chave de API do Google n√£o foi encontrada. Por favor, adicione-a em .streamlit/secrets.toml.")
    st.stop()

# --- Fun√ß√µes de Intera√ß√£o com a API ---

def extract_components_from_image(image_bytes):
    """
    Usa o modelo Gemini Vision para extrair componentes da imagem de arquitetura.
    """
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    
    # Converte bytes para um objeto de imagem PIL para o modelo
    img = Image.open(io.BytesIO(image_bytes))

    prompt = """
    Analise esta imagem de uma arquitetura de sistema em nuvem.
    Identifique todos os componentes tecnol√≥gicos, servi√ßos e recursos (ex: AWS Shield, Application Load Balancer, Amazon RDS, EFS, etc.).
    Liste os componentes extra√≠dos em um formato de lista JSON.
    Exemplo de sa√≠da:
    {
      "componentes": [
        "AWS Shield",
        "Amazon CloudFront",
        "AWS WAF",
        "Application Load Balancer",
        "Auto Scaling Group",
        "Servidores de API (SEI/SIP)",
        "Solr",
        "Amazon RDS (PostgreSQL)",
        "Amazon EFS",
        "Amazon ElastiCache"
      ]
    }
    Retorne APENAS o JSON, sem nenhum texto ou formata√ß√£o adicional.
    """
    
    try:
        response = model.generate_content([prompt, img])
        # Limpa a resposta para garantir que apenas o JSON seja extra√≠do
        json_text = response.text.strip().replace("```json", "").replace("```", "").strip()
        # Analisa o texto JSON em um dicion√°rio Python
        return json.loads(json_text)
    except Exception as e:
        st.error(f"Erro ao extrair componentes: {e}")
        st.error(f"Resposta bruta da API: {response.text if 'response' in locals() else 'Nenhuma resposta recebida'}")
        return None

def get_stride_analysis(components_list):
    """
    Gera uma an√°lise STRIDE detalhada com base em uma lista de componentes.
    """
    model = genai.GenerativeModel('gemini-1.5-flash-latest') # Usando um modelo mais r√°pido para an√°lise de texto
    
    # Formata a lista de componentes para o prompt
    component_str = ", ".join(components_list)
    
    prompt = f"""
    Aja como um especialista em seguran√ßa de aplica√ß√µes (AppSec).
    Com base na seguinte lista de componentes de uma arquitetura em nuvem: **{component_str}**.

    Realize uma an√°lise de amea√ßas usando a metodologia STRIDE.
    Para cada categoria do STRIDE (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege), identifique amea√ßas potenciais relacionadas aos componentes listados e sugira medidas de contorno (mitiga√ß√µes) concretas.

    Formate a sa√≠da como uma tabela Markdown com as seguintes colunas:
    'Categoria STRIDE', 'Amea√ßa Potencial', 'Componentes Afetados', 'Medida de Contorno Sugerida'.

    Exemplo de linha:
    | Spoofing | Falsifica√ß√£o de identidade de usu√°rios ou servi√ßos para acessar APIs. | API Servers, Solr, RDS | Implementar autentica√ß√£o forte (OAuth2, mTLS) e controle de acesso granular com IAM Roles. |

    Apresente a an√°lise completa na tabela Markdown.
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Erro ao gerar a an√°lise STRIDE: {e}")
        return None

# --- Interface da Aplica√ß√£o ---

st.title("üõ°Ô∏è An√°lise de Arquitetura e Vulnerabilidades com Gemini")
st.markdown("Fa√ßa o upload de uma imagem da sua arquitetura de sistema para que a IA identifique os componentes, analise as vulnerabilidades usando o m√©todo STRIDE e sugira mitiga√ß√µes.")

st.sidebar.header("Como usar:")
st.sidebar.info(
    "1. **Carregue a Imagem**: Use o bot√£o de upload para carregar um diagrama da sua arquitetura.\n\n"
    "2. **Processe a Imagem**: Clique no bot√£o 'Analisar Arquitetura com Gemini'.\n\n"
    "3. **Revise os Relat√≥rios**: A aplica√ß√£o ir√° gerar dois relat√≥rios: a lista de componentes extra√≠dos e a an√°lise completa de amea√ßas STRIDE."
)
st.sidebar.warning("Os resultados s√£o gerados por IA e devem ser revisados por um especialista em seguran√ßa. A precis√£o depende da qualidade e clareza da imagem.")


# --- Se√ß√£o de Upload ---
st.header("1. Upload da Modelagem da Arquitetura")
uploaded_file = st.file_uploader(
    "Selecione um arquivo de imagem (.png, .jpg, .jpeg)",
    type=["png", "jpg", "jpeg"]
)

if uploaded_file is not None:
    # Converte o arquivo para bytes para envio
    image_bytes = uploaded_file.getvalue()
    
    st.image(image_bytes, caption="Imagem da Arquitetura Carregada", use_column_width=True)

    if st.button("üöÄ Analisar Arquitetura com Gemini", type="primary"):
        st.session_state.components_result = None
        st.session_state.stride_result = None

        # Etapa 1: Extrair Componentes
        with st.spinner("Etapa 1/2: Analisando a imagem para extrair componentes..."):
            components_result = extract_components_from_image(image_bytes)
            st.session_state.components_result = components_result

        if st.session_state.components_result and 'componentes' in st.session_state.components_result:
            st.subheader("Componentes Identificados pela IA:")
            extracted_components = st.session_state.components_result['componentes']
            st.info(f"**Componentes:** {', '.join(extracted_components)}")

            # Etapa 2: Gerar An√°lise STRIDE
            with st.spinner("Etapa 2/2: Gerando relat√≥rio de amea√ßas STRIDE..."):
                stride_result = get_stride_analysis(extracted_components)
                st.session_state.stride_result = stride_result
        else:
            st.error("N√£o foi poss√≠vel extrair componentes da imagem. Tente uma imagem mais clara ou com componentes mais definidos.")

# --- Exibi√ß√£o dos Resultados ---
if 'stride_result' in st.session_state and st.session_state.stride_result:
    st.header("Relat√≥rio de An√°lise de Amea√ßas (STRIDE)")
    st.markdown(st.session_state.stride_result)
    st.success("An√°lise conclu√≠da com sucesso!")
    st.balloons()